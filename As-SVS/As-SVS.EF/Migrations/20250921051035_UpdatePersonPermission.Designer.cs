// <auto-generated />
using System;
using As_SVS.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AsSVS.EF.Migrations
{
    [DbContext(typeof(As_SVSContext))]
    [Migration("20250921051035_UpdatePersonPermission")]
    partial class UpdatePersonPermission
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("As_SVS.Core.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("salary");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex(new[] { "Username" }, "UQ_Admins_Username")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Annoucement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Annoucement1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("annoucement");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Annoucements");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("file_url");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<DateOnly>("UpdatedDue")
                        .HasColumnType("date")
                        .HasColumnName("updated_due");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("As_SVS.Core.Models.AssignmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<string>("Feedback")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("feedback");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("file_url");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Assignment_Submissions", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateNumber")
                        .HasColumnType("int")
                        .HasColumnName("certificate_number");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_url");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<DateOnly>("IssuedAt")
                        .HasColumnType("date")
                        .HasColumnName("issued_at");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("course_code");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<bool>("IsProgressLimited")
                        .HasColumnType("bit")
                        .HasColumnName("is_progress_limited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Enrolment", b =>
                {
                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateOnly?>("EnrolmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrolment_date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Enrolment", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("grade_level");

                    b.Property<decimal>("Number")
                        .HasColumnType("numeric(12, 0)")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseOrder")
                        .HasColumnType("int")
                        .HasColumnName("course_order");

                    b.Property<string>("LessonDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lesson_details");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "Number" }, "UQ_Lesson_Number")
                        .IsUnique();

                    b.HasIndex(new[] { "CourseOrder" }, "UQ_Lesson_Order")
                        .IsUnique();

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.LiveAttendance", b =>
                {
                    b.Property<TimeOnly>("JoinedAt")
                        .HasColumnType("time")
                        .HasColumnName("joined_at");

                    b.Property<TimeOnly?>("LeftAt")
                        .HasColumnType("time")
                        .HasColumnName("left_at");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("LiveAttendance", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.LiveSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<string>("MeetingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meeting_url");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LiveSessions");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("attachments");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("EditedAt")
                        .HasColumnType("date")
                        .HasColumnName("edited_at");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("message_content");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Module", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("password");

                    b.Property<int>("Permission")
                        .HasColumnType("int")
                        .HasColumnName("permissions");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ_Pesron_Email")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("As_SVS.Core.Models.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<decimal>("Number")
                        .HasColumnType("numeric(4, 0)")
                        .HasColumnName("number");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Options", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("question");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Quiz_Questions", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.Quize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseOrder")
                        .HasColumnType("int")
                        .HasColumnName("course_order");

                    b.Property<bool>("IsPassRequiered")
                        .HasColumnType("bit")
                        .HasColumnName("is_pass_requiered");

                    b.Property<double>("MinPassScore")
                        .HasColumnType("float")
                        .HasColumnName("min_pass_score");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quizes");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Average")
                        .HasColumnType("float")
                        .HasColumnName("average");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mother_name");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("student_code");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentLesson", b =>
                {
                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Lesson", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentQuizAttemp", b =>
                {
                    b.Property<DateOnly?>("AttempDate")
                        .HasColumnType("date")
                        .HasColumnName("attemp_date");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<double>("ScoreAchived")
                        .HasColumnType("float")
                        .HasColumnName("score_achived");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_Quiz_Attemp", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentRoom", b =>
                {
                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasIndex("RoomId");

                    b.ToTable("Student_Room", (string)null);
                });

            modelBuilder.Entity("As_SVS.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedbacks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("feedbacks");

                    b.Property<int>("GradesId")
                        .HasColumnType("int")
                        .HasColumnName("grades_id");

                    b.Property<string>("NationalNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("national_number");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("qualifications");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("salary");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("specialization");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("teacher_code");

                    b.HasKey("Id");

                    b.HasIndex("GradesId");

                    b.HasIndex("PersonId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Admin", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Person", "Person")
                        .WithMany("Admins")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Admins_People");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Annoucement", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Course", "Course")
                        .WithMany("Annoucements")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Annoucements_Courses");

                    b.HasOne("As_SVS.Core.Models.Teacher", "Teacher")
                        .WithMany("Annoucements")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Annoucements_Teachers");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Assignment", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignments_Courses");

                    b.HasOne("As_SVS.Core.Models.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignments_Teachers");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("As_SVS.Core.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Submissions_Assignments");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Submissions_Students");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Certificate", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Grade", "Grade")
                        .WithMany("Certificates")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_Grades");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany("Certificates")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_Students");

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Enrolment", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrolment_Courses");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrolment_Students");

                    b.HasOne("As_SVS.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrolment_Teachers");

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Lesson", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_Module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("As_SVS.Core.Models.LiveAttendance", b =>
                {
                    b.HasOne("As_SVS.Core.Models.LiveSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_LiveAttendance_LiveSessions");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_LiveAttendance_Students");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("As_SVS.Core.Models.LiveSession", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Room", "Room")
                        .WithMany("LiveSessions")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_LiveSessions_Rooms");

                    b.HasOne("As_SVS.Core.Models.Teacher", "Teacher")
                        .WithMany("LiveSessions")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_LiveSessions_Teachers");

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Message", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Person", "Person")
                        .WithMany("Messages")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_People");

                    b.HasOne("As_SVS.Core.Models.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Rooms");

                    b.Navigation("Person");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Module", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Module_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("As_SVS.Core.Models.QuestionOption", b =>
                {
                    b.HasOne("As_SVS.Core.Models.QuizQuestion", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Options_Quiz_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("As_SVS.Core.Models.QuizQuestion", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Quize", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK_Quiz_Questions_Quizes");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Quize", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Module", "Module")
                        .WithMany("Quizes")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_Quizes_Module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Student", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Grades");

                    b.HasOne("As_SVS.Core.Models.Person", "Person")
                        .WithMany("Students")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_People");

                    b.Navigation("Grade");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentLesson", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Lesson_Lesson");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Lesson_Students");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentQuizAttemp", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Quize", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Quiz_Attemp_Quizes");

                    b.HasOne("As_SVS.Core.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Quiz_Attemp_Students");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("As_SVS.Core.Models.StudentRoom", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Room_Rooms");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Teacher", b =>
                {
                    b.HasOne("As_SVS.Core.Models.Grade", "Grades")
                        .WithMany("Teachers")
                        .HasForeignKey("GradesId")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Grades");

                    b.HasOne("As_SVS.Core.Models.Person", "Person")
                        .WithMany("Teachers")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_People");

                    b.Navigation("Grades");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSubmissions");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Course", b =>
                {
                    b.Navigation("Annoucements");

                    b.Navigation("Assignments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Grade", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Module", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Quizes");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Person", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Messages");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("As_SVS.Core.Models.QuizQuestion", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Quize", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Room", b =>
                {
                    b.Navigation("LiveSessions");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Student", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("As_SVS.Core.Models.Teacher", b =>
                {
                    b.Navigation("Annoucements");

                    b.Navigation("Assignments");

                    b.Navigation("LiveSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
